esphome:
  name: cooler-one
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: your_ssid
  password: your_password
  manual_ip:
    static_ip: 192.168.1.106
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    
  ap:
    ssid: "Cooler Fallback Hotspot"
    password: "coolercooler"

captive_portal:

logger:

api:
  password: "cooler"

ota:
  password: "cooler"

substitutions:
  name: cooler

binary_sensor:
  - platform: gpio # For push button onboard
    id: push_button
    pin:
      number: D7
      mode: INPUT_PULLUP
    on_multi_click:
      - timing:
          - ON for 1s to 3s
          - OFF for at least 0.2s
        then:
          - logger.log: "Long Press"
          - fan.turn_off:
              id: cooler
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Single Press"
          - fan.turn_on:
              id: cooler
              speed: 3
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double Press"
          - fan.turn_on:
              id: cooler
              speed: 2
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Triple Press"
          - fan.turn_on:
              id: cooler
              speed: 1

  - platform: gpio
    id: oscillation_button
    pin:
      number: D8
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 20ms  # Ensure stable signal
    on_click:
      - min_length: 50ms  # Adjust as needed for button debouncing
        max_length: 1s
        then:
          - logger.log: "Oscillation Button Clicked"
          - if:
              condition:
                switch.is_on: oscillation
              then:
                - switch.turn_off: oscillation
              else:
                - switch.turn_on: oscillation

switch:
  - platform: gpio
    internal: true
    name: "${name} High Relay"
    pin: 
      number: D5
    inverted: True
    icon: mdi:fan-speed-3
    id: relay3

  - platform: gpio
    name: "${name} Medium Relay"
    internal: true
    pin: 
      number: D2
    inverted: True
    icon: mdi:fan-speed-2
    id: relay2

  - platform: gpio
    name: "${name} Low Relay"
    internal: true
    pin: 
      number: D1
    inverted: True
    icon: mdi:fan-speed-1
    id: relay1 

  - platform: output
    id: oscillation
    name: "oscillation"
    internal: true
    output: oscillation_out

  - platform: restart
    name: "$name Restart"

output:
  - platform: template
    id: fan_1
    type: float 
    write_action:
      - if:
          condition:
            lambda: return state == 0;
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay2
            - switch.turn_off: relay3
            - switch.turn_off: oscillation  # Turn off oscillation when fan is turned off
      - if:
          condition:
            lambda: return state > 0 and state < 0.4;
          then:
            - switch.turn_off: relay2
            - switch.turn_off: relay3
            - switch.turn_on: relay1
            - switch.turn_on: oscillation  # Turn on oscillation when fan is turned on
      - if:
          condition:
            lambda: return state > 0.4 and state < 0.7;
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay3
            - switch.turn_on: relay2
            - switch.turn_on: oscillation  # Turn on oscillation when fan is turned on
      - if:
          condition:
            lambda: return state > 0.7;
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay2
            - switch.turn_on: relay3
            - switch.turn_on: oscillation  # Turn on oscillation when fan is turned on

  - platform: gpio
    pin: D6
    id: oscillation_out
    inverted: true

fan:
  - platform: speed
    id: cooler
    output: fan_1
    name: "Cooler"
    oscillation_output: oscillation_out
    speed_count: 3
    on_turn_off:
      then:
        - switch.turn_off: oscillation  # Turn off oscillation when fan is turned off

text_sensor:
  - platform: template
    name: $name Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:
  - platform: wifi_signal
    name: "$name WiFi Signal"
    update_interval: 60s
    
  - platform: uptime
    name: $name Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
